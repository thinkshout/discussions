<?php

/**
 * @file
 * Contains discussions_email.module.
 */

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\user\Entity\User;

define('DISCUSSIONS_EMAIL_FREQUENCY_NONE', 1);
define('DISCUSSIONS_EMAIL_FREQUENCY_INDIVIDUAL', 2);
define('DISCUSSIONS_EMAIL_FREQUENCY_DIGEST', 3);

define('DISCUSSIONS_EMAIL_SEPARATOR', '+');
define('DISCUSSIONS_EMAIL_MESSAGE_SEPARATOR', '-------- Reply Above This Line --------');

/**
 * Implements hook_help().
 */
function discussions_email_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the discussions_email module.
    case 'help.page.discussions_email':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Create discussions by sending emails.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function discussions_email_group_type_insert(EntityInterface $entity) {
  // Build the 'default' display ID for both the entity form and view mode.
  $default_display_id = 'group.' . $entity->id() . 'default';

  // Build or retrieve the 'default' form mode.
  if (!$form_display = EntityFormDisplay::load($default_display_id)) {
    $form_display = EntityFormDisplay::create([
      'targetEntityType' => 'group',
      'bundle' => $entity->id(),
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }

  // Build or retrieve the 'default' view mode.
  if (!$view_display = EntityViewDisplay::load($default_display_id)) {
    $view_display = EntityViewDisplay::create([
      'targetEntityType' => 'group',
      'bundle' => $entity->id(),
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }

  // Add discussions_email_address field.
  FieldConfig::create([
    'field_storage' => FieldStorageConfig::loadByName('group', 'discussions_email_address'),
    'bundle' => $entity->id(),
    'label' => t('Discussions Group Email'),
  ])->save();

  // Assign widget settings for the 'default' form mode.
  $form_display->setComponent('discussions_email_address', [
    'type' => 'string_textfield',
  ]);

  // Assign display settings for the 'default' view mode.
  $view_display->setComponent('discussions_email_address', [
    'label' => 'above',
    'type' => 'text_default',
  ]);

  // Add discussions_email_postscript field.
  FieldConfig::create([
    'field_storage' => FieldStorageConfig::loadByName('group', 'discussions_email_postscript'),
    'bundle' => $entity->id(),
    'label' => t('Email Postscript'),
    'description' => "This text will be included at the end of emails generated by comments in this group's discussions. Be sure to include unsubscribe instructions if you change the default values. You can include custom links and values using the following variables:<br /><br />\r\n\r\n@group_name : The name of this group.<br />\r\n@site_name : The name of this website.<br />\r\n@group_email : The email address used to post to this group.<br />\r\n@group_link : A link to view this group on the web.<br />\r\n@discussion_link : A link to view the discussion this email came from on the web.<br />\r\n@settings_link : A link to this user's membership settings page.<br />",
    'default_value' => "-----------------------\r\n| You received this message because you are a member of the group @group_name at @site_name.\r\n| To unsubscribe from this group and stop receiving emails from it, reply with the subject line unsubscribe.\r\n| To post to this group, send email to @group_email.\r\n| Visit this group at @group_link.\r\n| View this discussion online at @discussion_link.\r\n| To control your subscription settings, visit @settings_link.\r\n-----------------------",
  ])->save();

  // Assign widget settings for the 'default' form mode.
  $form_display->setComponent('discussions_email_postscript', [
    'type' => 'string_textarea',
  ]);

  // Assign display settings for the 'default' view mode.
  $view_display->removeComponent('discussions_email_postscript');

  // Add discussions_email_subject_prefix field.
  FieldConfig::create([
    'field_storage' => FieldStorageConfig::loadByName('group', 'discussions_email_subject_prefix'),
    'bundle' => $entity->id(),
    'label' => t('Email Subject Prefix'),
  ])->save();

  // Assign widget settings for the 'default' form mode.
  $form_display->setComponent('discussions_email_subject_prefix', [
    'type' => 'string_textfield',
  ]);

  // Assign display settings for the 'default' view mode.
  $view_display->removeComponent('discussions_email_subject_prefix');

  $form_display->save();
  $view_display->save();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function discussions_email_comment_insert(EntityInterface $entity) {
  /** @var \Drupal\comment\Entity\Comment $entity */

  $config = \Drupal::config('discussions_email.settings');

  // Only send email if comment is a reply to a discussion.
  if ($entity->bundle() != 'discussions_reply') {
    return;
  }

  // Load comment author user.
  $user = User::load($entity->get('uid')->getValue()[0]['target_id']);

  // Load parent discussion.
  $discussion = $entity->getCommentedEntity();

  /** @var \Drupal\discussions\GroupDiscussionService $group_discussion_service */
  $group_discussion_service = \Drupal::service('discussions.group_discussion');

  // Load group containing parent discussion.
  $group = $group_discussion_service->getDiscussionGroup($discussion->id());

  $to_addresses = [];

  // Select group members to send email update to.
  $email_author = $config->get('email_author');
  foreach ($group->getMembers() as $member) {
    // Skip unapproved group members.
    if ($member->requiresApproval()) {
      continue;
    }

    // Skip author unless configured to email author.
    if (!$email_author && ($member->getUser()->id() == $user->id())) {
      continue;
    }

    if ($member->getGroupContent()->hasField('discussions_email_frequency')) {
      $email_frequency = $member->getGroupContent()->get('discussions_email_frequency')->value;

      // Skip members who choose not to receive individual updates.
      if ($email_frequency != DISCUSSIONS_EMAIL_FREQUENCY_INDIVIDUAL) {
        continue;
      }

      $to_addresses[] = $member->getUser()->getEmail();
    }
  }

  // Only send email if there's at least one valid recipient.
  if (empty($to_addresses)) {
    return;
  }

  // Get ID of the currently enabled discussions email plugin.
  $email_plugin_id = $config->get('plugin_id');

  // Don't attempt to send email without an enabled plugin.
  if (empty($email_plugin_id)) {
    return;
  }

  /** @var \Drupal\discussions_email\DiscussionsEmailPluginManager $email_plugin_manager */
  $email_plugin_manager = \Drupal::service('plugin.manager.discussions_email');

  /** @var \Drupal\discussions_email\Plugin\DiscussionsEmailPluginInterface $plugin */
  $plugin = $email_plugin_manager->createInstance($email_plugin_id);

  // Send email via plugin.
  $group_email_address = $group->get('discussions_email_address')->value;
  list($from_user, $from_domain) = explode('@', $group_email_address);
  $from_address = $from_user . DISCUSSIONS_EMAIL_SEPARATOR . $discussion->id() . DISCUSSIONS_EMAIL_SEPARATOR . $entity->id() . '@' . $from_domain;

  // TODO: Postscript token replacement on body.

  // Prepare comment body for email.
  $rendered_comment = $entity->get('comment_body')->view();
  $body = $rendered_comment[0]['#text'];

  // Add email subject prefix, if set.
  $subject_prefix = $group->hasField('discussions_email_subject_prefix') ? $group->get('discussions_email_subject_prefix')->value : NULL;

  $message = [
    // TODO:
    'id' => '',
    'from_name' => '',
    'from_email' => $from_address,
    'to' => $to_addresses,
    'subject' => (!empty($subject_prefix)) ? $subject_prefix . ' ' . $discussion->label() : $discussion->label(),
    'body' => $body,
  ];

  $plugin->sendEmail($message, $group, $discussion, $entity);
}

/**
 * Implements hook_comment_links_alter().
 */
function discussions_email_comment_links_alter(array &$links, \Drupal\comment\CommentInterface $entity, array &$context) {
  // Remove "reply" link from comments because when replying to comments via
  // email we'll always be replying as opposed to posting a new comment and the
  // threading will get really deep really quick. Instead, we want to post each
  // comment as a new comment in the thread and remove the ability to "reply"
  // altogether.
  unset($links['comment']['#links']['comment-reply']);
}
