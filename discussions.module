<?php

/**
 * @file
 * Adds discussion groups to Drupal.
 */

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContentType;
use Drupal\group\Entity\GroupType;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Implements hook_entity_extra_field_info().
 */
function discussions_entity_extra_field_info() {
  $extra = array();

  foreach (GroupType::loadMultiple() as $group_type) {
    // Add discussions field to group entity.
    $extra['group'][$group_type->id()]['display']['discussions'] = array(
      'label' => t('Discussions'),
      'description' => t('List of discussions in group.'),
      'weight' => 100,
      'visible' => TRUE,
    );
  }

  return $extra;
}

/**
 * Implements hook_entity_view_alter().
 */
function discussions_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Add fields to group entity.
  if (isset($build['#entity_type']) && ($build['#entity_type'] == 'group')) {
    // Populate discussions field.
    /** @var \Drupal\group\Entity\Group $entity */
    $build['discussions'] = array(
      '#type' => 'view',
      '#name' => 'discussions_group_discussions',
      '#display_id' => 'default',
      '#arguments' => array($entity->id()),
    );
  }
}

/**
 * Implements hook_views_query_alter().
 */
function discussions_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'discussions_group_discussions') {

    // Include comments when searching discussions.
    $comment_field_data_config = array(
      'type' => 'LEFT',
      'table' => 'comment_field_data',
      'field' => 'entity_id',
      'left_table' => 'discussions',
      'left_field' => 'id',
      'operator' => '=',
      'extra' => array(
        0 => array(
          'field' => 'comment_type',
          'value' => 'discussions_reply',
        ),
      ),
    );

    $comment_body_config = array(
      'type' => 'LEFT',
      'table' => 'comment__comment_body',
      'field' => 'entity_id',
      'left_table' => 'comment_field_data',
      'left_field' => 'cid',
      'operator' => '=',
      'extra' => array(
        0 => array(
          'field' => 'deleted',
          'value' => 0,
        ),
      ),
    );

    // Join comment_field_data table.
    $comment_field_data_join = Views::pluginManager('join')->createInstance('standard', $comment_field_data_config);
    // Add comment_field_data table relationship so comment__comment_body
    // table can be joined.
    $query->addRelationship('comment_field_data', $comment_field_data_join, 'comment_field_data');

    // Join comment__comment_body table.
    $comment_body_join = Views::pluginManager('join')->createInstance('standard', $comment_body_config);
    $query->addTable('comment__comment_body', 'comment_field_data', $comment_body_join);

    if (!empty($query->view->filter['combine']->value)) {
      // The where group containing the discussion match condition.
      $where_group = 1;

      // Change the where group from AND to OR to accept two conditions.
      $query->where[$where_group]['type'] = 'OR';

      // Add comment body match condition.
      $query->addWhere($where_group,
        'comment_field_data__comment__comment_body.comment_body_value',
        '%' . $query->view->filter['combine']->value . '%',
        'LIKE');
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function discussions_views_data_alter(&$data) {

  $data['discussions']['current_user'] = array(
    'title' => t('Discussions by current user'),
    'filter' => array(
      'title' => t('Discussions by current user'),
      'help' => t('Filters discussions by the current user.'),
      'field' => 'user',
      'id' => 'discussions_current_user',
    ),
  );

  $data['group_content_field_data']['current_user'] = array(
    'title' => t('Groups by current user'),
    'filter' => array(
      'title' => t('Groups by current user'),
      'help' => t('Filters groups by the current user.'),
      'field' => 'uid',
      'id' => 'groups_current_user',
    ),
  );

}

/**
 * Implements hook_views_pre_render().
 */
function discussions_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'discussions_group_discussions') {

    // Get current user for access check.
    $user = \Drupal::currentUser();

    // Cache group content types.
    $group_content_types = [];

    foreach ($view->result as $index => $row) {
      $type = $row->_entity->bundle();

      /** @var \Drupal\group\Entity\GroupInterface[] $groups */
      $groups = [];

      // Load group content type if not already cached.
      if (!isset($group_content_types[$type])) {
        $group_content_types[$type] = GroupContentType::loadByContentPluginId("group_discussion:$type");
      }

      if (!empty($group_content_types[$type])) {
        $group_contents = \Drupal::entityTypeManager()
          ->getStorage('group_content')
          ->loadByProperties([
            'type' => array_keys($group_content_types[$type]),
            'entity_id' => $row->_entity->id(),
          ]);
      }

      if (!empty($group_contents)) {
        foreach ($group_contents as $group_content) {
          /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
          $group = $group_content->getGroup();
          $groups[$group->id()] = $group;
        }
      }

      // Loop through groups this discussion is attached to and remove
      // if the current user does not have permission to view it.
      foreach ($groups as $group) {
        if (!$group->hasPermission("view $type discussion", $user)) {
          unset($view->result[$index]);
        }
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function discussions_theme_registry_alter(&$theme_registry) {
  $theme_registry['comment']['path'] = drupal_get_path('module', 'discussions') . '/templates';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function discussions_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Change current user topics select element to checkbox.
  if (isset($form['current_user'])) {
    $form['current_user']['#type'] = 'checkbox';
    $form['current_user']['#default_value'] = FALSE;
    unset($form['current_user']['#options']);

    $form['current_user']['#weight'] = 1;
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function discussions_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  if ($route_match->getRouteName() == 'entity.discussion.canonical') {
    // Add discussion group breadcrumb to discussion route.
    $discussion = $route_match->getParameter('discussion');

    if (!empty($discussion)) {
      $type = $discussion->bundle();

      $group_content_types = GroupContentType::loadByContentPluginId("group_discussion:$type");

      if (!empty($group_content_types)) {
        $group_contents = \Drupal::entityTypeManager()
          ->getStorage('group_content')
          ->loadByProperties([
            'type' => array_keys($group_content_types),
            'entity_id' => $discussion->id(),
          ]);
      }

      if (!empty($group_contents)) {
        /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
        $group_content = array_values($group_contents)[0];
        $group = $group_content->getGroup();

        $breadcrumb->addLink(Link::createFromRoute($group->label(), 'entity.group.canonical', array('group' => $group->id())));
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function discussions_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.group.preferences') {
    $form['actions']['submit']['#submit'][] = 'discussions_preferences_form_post_submit';
  }
}

/**
 * Submit handler for group preferences form.
 */
function discussions_preferences_form_post_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\group\Entity\Group $group */
  $group = \Drupal::routeMatch()->getParameter('group');
  $form_state->setRedirect('entity.group.preferences', ['group' => $group->id()]);
}
